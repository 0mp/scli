#!/usr/bin/env python3

import os
import re
import sys
import json
import urwid
import subprocess
import tempfile
import atexit
import argparse
import logging
from subprocess import PIPE, Popen

# #############################################################################
# constants
# #############################################################################

SIGNALCLI_FOLDER = os.getenv(os.path.join('XDG_DATA_HOME', 'signal-cli'),
                             os.path.expanduser('~/.local/share/signal-cli'))

DATA_FOLDER = os.path.join(SIGNALCLI_FOLDER, 'data')
ATTACHMENT_FOLDER = os.path.join(SIGNALCLI_FOLDER, 'attachments')

LOG_FILE = os.path.expanduser('~/scli.log')


# #############################################################################
# utility
# #############################################################################

def has_key(key, x):
    if x: return key in x
    else: return False

def get_url(txt):
    try: return re.search('(?P<url>https?://[^\s]+)', txt).group('url')
    except: return None

# #############################################################################
# signal utility
# #############################################################################

def hash_contact(x):
    h = ''
    if x.get('number'): h = h + x['number']
    if x.get('name'): h = h + x['name']
    if x.get('profileKey'): h = h + x['profileKey']
    if x.get('groupId'): h = h + x['groupId']
    return h

def get_contact_name(x):
    name = x.get('name')
    if name or name.strip(' ') != '':
        return name

    number = x.get('number')
    if number:
        return number

    return "ERR"

def is_envelope_group_msg(envelope):
    try:
        envelope['dataMessage']['groupInfo']['groupId']
        return True
    except:
        return False

def is_contact_group(contact):
    return has_key('groupId', contact)

def is_same(contact, envelope):
    if contact is None or envelope is None:
        return False

    if is_contact_group(contact) and is_envelope_group_msg(envelope):
        return contact['groupId'] == envelope['dataMessage']['groupInfo']['groupId']
    elif not is_contact_group(contact) and not is_envelope_group_msg(envelope):
        return contact['number'] == envelope['source']
    else:
        return False

def envelope_get_msg(envelope):
    try: return envelope['dataMessage']['message']
    except: return None

def envelope_get_group_id(envelope):
    try: return envelope['dataMessage']['groupInfo']['groupId']
    except: return None

def envelope_get_attachments(envelope):
    try: return envelope['dataMessage']['attachments']
    except: return []

def attachment_get_name(attachment):
    try: return attachment['contentType']
    except: return os.path.basename(attachment)

# #############################################################################
# ui utility
# #############################################################################

class NiceBox(urwid.AttrMap):
    def __init__(self, w, title=''):
        box = urwid.AttrMap(urwid.LineBox(urwid.AttrMap(w, 'normal'), title_align='center'), 'box_normal')
        super().__init__(box, None, focus_map={'box_normal':'box_focused'})


# #############################################################################
# clipboard
# #############################################################################

class clip:
    mime_order = ['image/png', 'image/jpeg', 'image/jpg', 'text/uri-list']

    @staticmethod
    def xrun(mime):
        p = Popen(['xclip', '-selection', 'clipboard', '-t', mime, '-o'], stdout=PIPE, stderr=PIPE)
        out, err = p.communicate()
        return out

    @staticmethod
    def xrun_lines(mime):
        out = clip.xrun(mime)
        if out:
            return out.decode('utf-8').split('\n')

    @staticmethod
    def xfiles():
        out = clip.xrun_lines('TARGETS')

        for otype in out:
            for mtype in clip.mime_order:
                if mtype == otype:
                    if mtype.startswith('image/'):
                        content = clip.xrun(mtype)
                        suffix = '.' + mtype.split('/')[1]
                        tmp = tempfile.NamedTemporaryFile(mode='w+b', suffix=suffix, delete=False)
                        tmp.write(content)
                        tmp.flush()
                        tmp.close()
                        return [tmp.name]
                    elif mtype == 'text/uri-list':
                        content = clip.xrun_lines(mtype)
                        return [x.replace('file://', '') for x in content[1:]]

    def xput(txt):
        if not txt:
            return

        p = Popen(['xclip', '-selection', 'clipboard'], stdout=PIPE, stderr=PIPE, stdin=PIPE)
        p.stdin.write(bytes(txt, 'utf-8'))
        p.stdin.close()
        p.wait()

# #############################################################################
# commands
# #############################################################################

class commands(object):
    @staticmethod
    def exec(state, cmd, args):
        for (abbrvs, fn) in cmd_map:
            if cmd in [abbrv.lower() for abbrv in abbrvs]:
                fn(state, args)
                return

    @staticmethod
    def attach(state, args):
        try: args[0]
        except:
            state.set_error(':attach takes at least one argument.')
            return

        attachment = os.path.expanduser(args[0])
        message = ' '.join(args[1:])
        if not os.path.exists(attachment):
            state.set_error('File does not exist: ' + attachment)
            return

        state.signal.send_message(state.current_contact, message, [attachment])

    @staticmethod
    def attach_clip(state, args):
        files = clip.xfiles()
        message = ' '.join(args)

        if files:
            state.signal.send_message(state.current_contact, message, files)
        else:
            state.set_notification('Clipboard is empty.')

    @staticmethod
    def open_attach(envelope):
        result = False
        attachments = envelope_get_attachments(envelope)
        for attachment in attachments:
            if isinstance(attachment, dict):
                received_attachment = os.path.join(ATTACHMENT_FOLDER, str(attachment['id']))
                subprocess.call(['xdg-open', received_attachment])
                result = True
            elif isinstance(attachment, str) and os.path.exists(attachment):
                subprocess.call(['xdg-open', attachment])
                result = True
            else:
                result = False

        return result

    @staticmethod
    def open_last_attach(state, args):
        for txt in state.current_chat[::-1]:
            if commands.open_attach(txt.envelope): return

    @staticmethod
    def open_url(envelope):
        txt = envelope_get_msg(envelope)
        url = get_url(txt)
        if url:
            subprocess.call(['xdg-open', url])
            return True

        return False

    @staticmethod
    def open_last_url(state, args):
        for txt in state.current_chat[::-1]:
            if commands.open_url(txt.envelope): return

    @staticmethod
    def toggle_notifications(state, args):
        state.cfg_send_notifications = not state.cfg_send_notifications
        notif = 'Desktop notifications are '
        if state.cfg_send_notifications: notif = notif + 'ON'
        else: notif = notif + 'OFF'
        state.set_notification(notif + '.')

    @staticmethod
    def send_notification(state, title, body):
        if state.cfg_send_notifications:
            subprocess.call(['notify-send', title, body])

    @staticmethod
    def quit(state, args):
        raise urwid.ExitMainLoop()

# TODO:
    # :quitGroup, :qg
    # :updateGroup,   :ug
    # :updateAccount, :ua
    # :saveState

cmd_map = [(['attach', 'a'], commands.attach),
           (['attachClip', 'c'], commands.attach_clip),
           (['openAttach', 'o'], commands.open_last_attach),
           (['openUrl', 'u'], commands.open_last_url),
           (['toggleNotifications', 'n'], commands.toggle_notifications),
           (['quit', 'q'], commands.quit)]

# #############################################################################
# signal
# #############################################################################

class Signal(object):
    signals = ['receive_message', 'send_message']

    def __init__(self, user):
        self.user = user
        self._path = os.path.join(DATA_FOLDER, user)
        if not os.path.exists(self._path):
            raise Exception(self.user + " does not exists!")
        self._data = self.load_data()

    def load_data(self):
        with open(self._path) as f:
            return json.load(f)

    def start_daemon(self, loop):
        fd = loop.watch_pipe(self.daemon_handler)
        return Popen(['signal-cli', '-u', self.user, 'daemon', '--json'], stdout=fd, stderr=fd, close_fds=True)

    def daemon_handler(self, line):
        if not line.strip():
            return

        try:
            e = json.loads(line)
            urwid.emit_signal(self, 'receive_message', e['envelope'])
        except Exception as e:
            logging.error('input:' + str(line))
            logging.exception(e)

    def send_message(self, contact, message="", attachments=[]):
        args = ['signal-cli', '--dbus', 'send', '--message', message]
        if contact.get('number'):
            args.append(contact['number'])
        else:
            args.append('--group')
            args.append(contact['groupId'])

        attachment_paths = [os.path.expanduser(attachment) for attachment in attachments]
        if all([os.path.exists(attachment_path) for attachment_path in attachment_paths]):
            if len(attachment_paths) > 0:
                args.append('--attachment')
            for attachment_path in attachment_paths:
                args.append(attachment_path)
        else:
            return (False, "Attached file(s) does not exist.")

        p = Popen(args, stdout=PIPE, stderr=PIPE)
        out, error = p.communicate()
        if p.returncode != 0:
            logging.error('send_message: exit code=' + str(p.returncode) + ', err=' + str(error))
            return (False, 'err:' + str(p.returncode) + str(error))
        else:
            envelope = {'dataMessage': {'message': message, 'attachments': attachments}}
            urwid.emit_signal(self, 'send_message', envelope)
            return (True, out)

    def contacts(self):
        return list(filter(lambda x: bool(get_contact_name(x).strip(' ')),
                           self._data['contactStore']['contacts']))

    def groups(self):
        return list(filter(lambda x: bool(x['name'].strip(' ')),
                           self._data["groupStore"]['groups']))

    def get_contact(self, number_or_id):
        for contact in self.contacts():
            if contact['number'] == number_or_id:
                return contact

        for group in self.groups():
            if group['groupId'] == number_or_id:
                return group

    def get_all_contacts(self):
        xs = []
        xs.append('Groups')
        xs.append('---')
        xs.extend(self.groups())
        xs.append('---')
        xs.append('Contacts')
        xs.append('---')
        xs.extend(self.contacts())
        return xs

urwid.register_signal(Signal, Signal.signals)

# #############################################################################
# ContactsWindow
# #############################################################################

class ContactsWindow(urwid.ListBox):
    def __init__(self, state):
        self.state = state
        self._body = []
        super().__init__(urwid.SimpleFocusListWalker(self._body))
        self.set_contacts(self.state.signal.get_all_contacts())
        self.focus_next()

    def set_contacts(self, contacts):
        def mk_contact(x):
            widget = None
            contact = None
            if x == '---':
                widget = urwid.Divider('-')
            elif isinstance(x, str):
                widget = urwid.Text(('bold', '~~ ' + x + ' ~~'), align='center')
            else:
                widget = urwid.Text(get_contact_name(x))
                contact = x

            am = urwid.AttrMap(widget, None, focus_map='reversed')
            am.contact = contact
            return am

        contacts = [mk_contact(x) for x in contacts]
        self._body.extend(contacts)
        self.focus_position = 0

    def get_focused_contact(self):
        return self.focus.contact

    def focus_next(self):
        try:
            self.focus_position = self.focus_position + 1
            if not self.get_focused_contact(): self.focus_next()
        except: pass

    def focus_prev(self):
        try:
            self.focus_position = self.focus_position - 1
            if not self.get_focused_contact(): self.focus_prev()
        except: pass

    def focus_first(self):
        try: self.focus_position = 2
        except: pass

    def focus_last(self):
        try: self.focus_position = len(self._body) - 1
        except: pass

    def keypress(self, size, key):
        key = super().keypress(size, key)
        if key == 'enter' or key == 'l':
            if self.get_focused_contact():
                self.state.set_current_contact(self.get_focused_contact(), key == 'enter')
        elif key == 'j' or key == 'down':
            self.focus_next()
        elif key == 'k' or key == 'up':
            self.focus_prev()
        elif key == 'g':
            self.focus_first()
        elif key == 'G':
            self.focus_last()
        elif key == 'r':
            pass # TODO: refresh
        return key

# #############################################################################
# ChatWindow
# #############################################################################

class ChatWindow(urwid.Frame):
    def __init__(self, state):
        self.state = state
        self._wtitle = urwid.Text("Receiver Name (+123456789)")
        self._wline = urwid.Edit('> ')
        self._wdiv = urwid.Divider('-')
        self._wlist = urwid.ListBox(self.state.current_chat)
        wcontext = urwid.Frame(self._wlist,
                              header=urwid.Divider('-'))
        self._wcontext = urwid.Frame(wcontext,
                                     header=self._wtitle,
                                     footer=self._wdiv)

        super().__init__(self._wcontext,
                         footer=self._wline)

        urwid.connect_signal(self.state, 'current_contact_changed', self.on_current_contact_changed)
        urwid.connect_signal(self.state.signal, 'receive_message', self.on_receive_message)
        urwid.connect_signal(self.state.signal, 'send_message', self.on_send_message)

    def is_focused_input(self):
        return self.focus_position == 'footer'

    def is_focused_chat(self):
        return self.focus_position == 'body'

    def focus_input(self):
        self.focus_position = 'footer'

    def focus_chat(self):
        self.focus_position = 'body'

    def focus_chatfirst(self):
        try: self._wlist.focus_position = 0
        except: pass

    def focus_chatlast(self):
        try: self._wlist.focus_position = len(self.state.current_chat) - 1
        except: pass

    def get_edit_text(self):
        return self._wline.get_edit_text()

    def set_edit_text(self, txt):
        self._wline.set_edit_text(txt)

    def set_title(self, contact):
        num = contact.get("number")
        if not num:
            num = str([get_contact_name(self.state.signal.get_contact(number)) for number in contact['members']])

        self._wtitle.set_text([('bold', get_contact_name(contact)), ' (', num, ')'])

    def print_received_message(self, envelope, history=None):
        source = envelope['source']
        is_group = is_envelope_group_msg(envelope)
        attachments = envelope_get_attachments(envelope)

        txt = '>> '
        if is_group:
            contact = self.state.signal.get_contact(source)
            if contact: txt = txt + get_contact_name(contact)
            else: txt = txt + source
            txt = txt + ' | '


        message = envelope_get_msg(envelope)
        attachments = envelope_get_attachments(envelope)

        if attachments != []:
            attachments_txt = ', '.join([attachment_get_name(attachment) + ' (' + str(i) + ')' for i, attachment in enumerate(attachments)])
            txt = txt +  '[attached: ' + attachments_txt + '] '

        body = None
        if history is not None: body = history
        else: body = self.state.current_chat

        wtxt = urwid.AttrMap(urwid.Text(txt + message), None, focus_map='reversed')
        wtxt.envelope = envelope
        body.append(wtxt)

        return body

    def print_sent_message(self, envelope):
        message = envelope_get_msg(envelope)
        attachments = envelope_get_attachments(envelope)

        txt = None
        if len(attachments) > 0:
            anames = ', '.join([os.path.basename(attachment) for attachment in attachments])
            txt = '[attached: ' + anames  + '] ' + message + ' <<'
        else:
            txt = message + ' <<'

        txt = urwid.AttrMap(urwid.Text(txt, align='right'), None, focus_map='reversed')
        txt.envelope = envelope
        self.state.current_chat.append(txt)
        self.focus_chatlast()

    def append_received_message(self, sender, envelope):
        contact_hash = hash_contact(sender)
        chat_history = []
        try: chat_history = self.state.chats[contact_hash]
        except: pass

        chat_history = self.print_received_message(envelope, history=chat_history)
        self.state.chats[contact_hash] = chat_history

    def exec_cmd(self, cmd, args):
        commands.exec(self.state, cmd, args)

    def on_send_message(self, envelope):
        self.print_sent_message(envelope)
        self.focus_chatlast()

    def on_receive_message(self, envelope):
        msg = envelope_get_msg(envelope)
        is_same_ = is_same(self.state.current_contact, envelope)
        is_group = is_envelope_group_msg(envelope)

        if msg is None:
            # log('NOMSG: ' + str(envelope))
            return

        contact = None
        if is_group: contact = self.state.signal.get_contact(envelope_get_group_id(envelope))
        else: contact = self.state.signal.get_contact(envelope['source'])
        notif = 'New message from ' + get_contact_name(contact) + ': "' + msg + '"'

        if is_same_:
            self.print_received_message(envelope)
            self.focus_chatlast()
            commands.send_notification(self.state, 'scli', notif)
        else:
            self.append_received_message(contact, envelope)
            self.state.set_notification(notif, contact)

    def on_current_contact_changed(self, old, current, focus=False):
        self.state.backup_chat(old)
        self.state.clear_current_chat()
        self.set_title(current)

        chat = self.state.chats.get(hash_contact(current))
        if chat: self.state.current_chat.extend(chat)

        self.focus_chatlast()

    def get_current_envelope(self):
        try: return self.state.current_chat[self._wlist.focus_position].envelope
        except: return None

    def focus_prev_msg(self):
        try: self._wlist.focus_position = self._wlist.focus_position - 1
        except: pass

    def focus_next_msg(self):
        try: self._wlist.focus_position = self._wlist.focus_position + 1
        except: pass

    def keypress(self, size, key):
        key = super().keypress(size, key)

        if self.is_focused_input():
            if key == 'enter':
                txt = self.get_edit_text()
                if txt.startswith(':'):
                    elems = list(filter(lambda x: x != '', txt[1:].split(' ')))
                    cmd = elems[0].lower()
                    args = elems[1:]
                    self.exec_cmd(cmd, args)
                elif txt.strip(' ') != '' and self.state.current_contact:
                    self.state.signal.send_message(self.state.current_contact, txt)
                self.set_edit_text('')
        elif self.is_focused_chat():
            envelope = self.get_current_envelope()
            if key == 'enter' or key == 'l':
                commands.open_attach(envelope) or commands.open_url(envelope)
            elif key == 'o':
                commands.open_url(envelope) or commands.open_attach(envelope)
            elif key == 'j':
                self.focus_next_msg()
            elif key == 'k':
                self.focus_prev_msg()
            elif key == 'g':
                self.focus_chatfirst()
            elif key == 'G':
                self.focus_chatlast()
            elif key == 'y':
                txt = envelope_get_msg(envelope)
                clip.xput(txt)
            elif key == 'q':
                # TODO: quote (https://github.com/AsamK/signal-cli/issues/151)
                pass

        return key

# #############################################################################
# MainWindow
# #############################################################################

class MainWindow(urwid.Frame):
    def __init__(self, state):
        self.state = state

        # ui
        self.current_focus = 'contacts'
        self._wcontacts = ContactsWindow(self.state)
        self._wchat = ChatWindow(self.state)
        self._wstatus = urwid.Text("...")

        wrapped_contacts = NiceBox(self._wcontacts)
        wrapped_chat = NiceBox(self._wchat)
        self._widgets = [('weight', 1, wrapped_contacts), ('weight', 3, wrapped_chat)]
        self._wcontext = urwid.Columns(widget_list=self._widgets, dividechars=0, focus_column=0)
        super().__init__(self._wcontext, footer=self._wstatus)

        # signals
        urwid.connect_signal(self.state, 'current_contact_changed', self.on_current_contact_changed)
        urwid.connect_signal(self.state, 'status_changed', self.on_status_changed)
        urwid.connect_signal(self.state, 'notification_changed', self.on_notification_changed)
        urwid.connect_signal(self.state, 'error_changed', self.on_error_changed)

    def set_status(self, txt):
        self._wstatus.set_text(txt)

    def set_contacts(self, contacts):
        self._wcontacts.set_contacts(contacts)

    def focus_input(self, cmd_mode=False):
        self.focus_position = 'body'
        self._wcontext.set_focus(1)
        self._wchat.focus_input()

        if cmd_mode:
            self._wchat._wline.set_edit_text(':')
            self._wchat._wline.set_edit_pos(1)

    def focus_contacts(self):
        self.focus_position = 'body'
        self._wcontext.set_focus(0)

    def focus_chat(self):
        self.focus_position = 'body'
        self._wcontext.set_focus(1)
        self._wchat.focus_chat()

    def focus_next(self):
        if self.current_focus == 'contacts':
            self.focus_chat()
            self.current_focus = 'chat'
        elif self.current_focus == 'chat':
            self.focus_input()
            self.current_focus = 'input'
        elif self.current_focus == 'input':
            self.focus_contacts()
            self.current_focus = 'contacts'

    def focus_prev(self):
        if self.current_focus == 'contacts':
            self.focus_input()
            self.current_focus = 'input'
        elif self.current_focus == 'chat':
            self.focus_contacts()
            self.current_focus = 'contacts'
        elif self.current_focus == 'input':
            self.focus_chat()
            self.current_focus = 'chat'

    def on_current_contact_changed(self, old, current, focus=False):
        if self.state.status_data is self.state.current_contact:
            self.state.set_status('')

        if focus:
            self.focus_input()

    def on_status_changed(self, status, data):
        self.set_status(status)

    def on_notification_changed(self, notif, data):
        self.set_status(notif)
        commands.send_notification(self.state, 'scli', notif)

    def on_error_changed(self, err):
        self.set_status(err)

    def keypress(self, size, key):
        key = super().keypress(size, key)

        if key == 'tab':
            self.focus_next()
        elif key == 'shift tab':
            self.focus_prev()
        elif key == ':':
            self.focus_input(cmd_mode=True)

        return key

# #############################################################################
# state
# #############################################################################

class State(object):
    signals = ['current_contact_changed', 'status_changed', 'notification_changed', 'error_changed']

    def __init__(self, number):
        self.signal = Signal(number)
        self.chats = {}
        self.error = ''
        self.status = ''
        self.notification = ''
        self.status_data = None
        self.current_contact = None
        self.current_chat = urwid.SimpleFocusListWalker([])

        self.cfg_send_notifications = False

    def set_current_contact(self, contact, focus=False):
        old = self.current_contact
        self.current_contact = contact
        urwid.emit_signal(self, 'current_contact_changed', old, contact, focus)

    def set_status(self, status, data=None):
        self.status = status
        self.status_data = data
        urwid.emit_signal(self, 'status_changed', status, data)

    def set_notification(self, notif, data=None):
        self.notification = notif
        self.status_data = data
        urwid.emit_signal(self, 'notification_changed', notif, data)

    def set_error(self, err):
        self.error = err
        urwid.emit_signal(self, 'error_changed', err)

    def clear_current_chat(self):
        self.current_chat.clear()

    def backup_chat(self, contact):
        if contact:
            self.chats[hash_contact(contact)] = [x for x in self.current_chat]

urwid.register_signal(State, State.signals)

# #############################################################################
# main
# #############################################################################

def main(argv):
    parser = argparse.ArgumentParser()
    parser.add_argument('-u', '--username', type=str, required=True, help='Phone number starting with "+" followed by country code.')
    parser.add_argument('--debug', action='store_true')
    args = parser.parse_args()

    if args.debug: logging.basicConfig(filename=LOG_FILE, level=logging.DEBUG)
    else: logging.basicConfig(filename=LOG_FILE, level=logging.CRITICAL)

    state = State(args.username)
    window = MainWindow(state)

    palette = [('normal', '', ''),
               ('box_normal', '', ''),
               ('box_focused', 'dark blue', ''),
               ('bold', 'bold', ''),
               ('reversed', 'standout', '')]

    loop = urwid.MainLoop(window, palette=palette)
    proc = state.signal.start_daemon(loop)
    atexit.register(proc.kill)

    loop.run()
    proc.kill()


if __name__ == "__main__":
    main(sys.argv[1:])
